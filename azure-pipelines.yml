
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: Windows-2019

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
# Starter pipeline
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/SW-Sdk-Net6.csproj'
- task: VSBuild@1
  displayName: 'Build solution SW-Sdk-Net6.csproj'
  inputs:
    solution: '**\SW-Sdk-Net6.csproj'
    vsVersion: '16.0'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
- task: VisualStudioTestPlatformInstaller@1
  inputs:
    packageFeedSelector: 'nugetOrg'
    versionSelector: 'latestPreRelease'
- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*Test*.dll
      **\*UT*.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "---->Add -rc version"
      $path = 'SW-Sdk-Net6\SW.Sdk-Net6.nuspec'
      $xml = [xml](Get-Content $path)
      $antVersion = $xml.package.metadata.version
      $xml.package.metadata.version = $antVersion+'-rc'
      $xml.Save($path)
- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: 'SW-Sdk-Net6/SW-Sdk-Net6.csproj'
    packDestination: '$(Build.ArtifactStagingDirectory)\SW-Sdk-Net6'
    versioningScheme: 'off'
- task: CopyFiles@2
  inputs:
    Contents: '*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: true
    OverWrite: true
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'SW-Sdk-Net6-package'
    publishLocation: 'Container'


